Вопросы менеджеру:
1. Будут ли сторонние команды\клиенты, использовать наше апи? Следует ли описать для них документацию API?
2. Список полей фиксированный или в будущем планируется добавить ещё поля?
3. Нужно ли добавить дополнительную ручную валидацию через административную панель?
Контент менеджер зайдет в список импортированных клиентов и отметит тех, что валидны после ручной проверки?
(добавить is_valid в таблицу clients и ограничить скоупом отдачу не провалидированных клиентов)
4. Какие проверки валидации нужны? Пустое, не пустое. Что делать с числами, которые фактически числа, но по факту это строки?
(случай с id и пробелами)
5. Нужно ли дожидать ответа от сервера при импорте? (если нет, перевести в очереди и настроить нотификацию через уведомления, смс или почту)
6. Есть ли ещё примеры файлов для выгрузки?
7. Какое нужно событие для передачи event, правильно ли я понимаю, что нужно отстреливать событие broadcast во вне?
8. Нужна ли ролевая модель?
9. Зачем нужно импортировать файл в бд? Может вынести в отдельное хранилище?
10. Нужна ли пагинация при получении списка?

Задание джуниору №1:
Нужно написать отдельный модуль импорта, который будет отвечать за импортирование на нашем проекте.
Следует заложить логику на возможное расширение списка моделей на импорт, а так же динамическую обработку полей и правил для них.

Прежде чем начать, почитай эти доки и освежи память:
- TDD: https://habr.com/ru/companies/otus/articles/674310/
- Тесты: https://laravel.su/docs/11.x/testing
- Библиотеки импорта: https://github.com/openspout/openspout и https://laravel-excel.com/
- Модули для ларавель: https://nwidart.com/laravel-modules/v6/introduction
- Работа с сокетами: https://laravel.com/docs/11.x/broadcasting
- Авторизация: https://laravel.com/docs/11.x/sanctum
- Файловая система: https://laravel.su/docs/11.x/filesystem
- Файловая система PHP: https://www.php.net/manual/ru/book.filesystem.php

Скинул две библиотеки по импорту, посмотри обе и попробуй понять, какая нам подходит больше.
Можешь попробовать потетстить, но сильно не увлекайся. Пример файла во вложении.

После того, как прочитаешь, давай созвонимся и обсудим эту задачу

Если что пиши, если будут вопросы)

(дополнительно исходя из сроков задачи, которые передал менеджер, можно сказать, что по ней не следует торопиться и у него
спокойно есть время изучить и попутно даже сранвить две библиотеки по импорту)

Задача джуниору №2:

Нужно написать импорт ексель файлов для таблицы клиентов

Ендпоинты
GET /api/clients
POST /api/import/clients/xlsx

Ключевые моменты задачи:
- Действуй по принципу TDD - начни с тестов
- Поля excel:
    - id
    - name
    - date (d.m.Y)
- Нужна таблица clients, где id из excel, это external_id (нужно для обратной совместимости)
- Так же нужна таблица imported_files где мы будем хранить импортируемый файл.
- При импортировании нужно добавить валидацию, ошибки которой логируем в виде {"Номер строки": ["ошибка1", "ошибка2"]} в формате json
- При импортировании нужно добавить счётчик кол-ва строк, которые импортированы. Ключ должен быть уникальный для каждого импорта
- Нужен broadcast event на успешный процесс импорта
- Ответ в GET запросе должен быть сгруппирован по дате и иметь вид {"data": [{"date": "Y-m-d", "items":[]},...{}]}


Пояснение хода мыслей:
В разговоре с джуниорами и мидлами предпочитаю сохранять добрую атмосферу и ограждать их от того, с чем приходят "сверху"
Если задачи горящие, то стараюсь их им не давать или вести параллельную разработку, декомпозировав основную задачу на подзадачи
Стараюсь в процессе работы давать им возможность изучать что-то новое и в последствии это закреплять, давая им направление
и свободы мыслей. Конечно встречаются иногда ситуации, когда говоришь просто "как надо сделать", но в большинстве своём я встречал
толковых ребят, которым важно давать возможность выражать свои идеи.
Так же даю понять ребятам, что они всегда могут ко мне обратиться, но предупреждаю, что стоит обращаться не по каждому вопросу, который
возник сиюсекундно, а только после того, как они начинают "застревать" над проблемой или задачей.
2 задачу структурировал последовательно, заранее описав конкретные эндпоинты дословно. Ребятам начального уровня приходится первое время
явно указывать на архитектуру проекта и его структуру, как должно быть, потому что их голова и так забита. Пусть лучше первое время
их голова будет забита новыми технологиями и решениями задач.

